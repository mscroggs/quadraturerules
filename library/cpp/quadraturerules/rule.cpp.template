--
template: Q in rule
filename: {{Q.snake_case_name}}.cpp
--
#include <stdexcept>
#include "{{Q.snake_case_name}}.h"

{{if Q.itype == single}}
std::pair<std::vector<double>, std::vector<double>>
quadraturerules::{{Q.snake_case_name}}(
    quadraturerules::Domain domain,
    std::size_t order
) {
  switch (domain)
  {
  {{for D in domains}}
  case quadraturerules::Domain::{{D.PascalCaseName}}:
    switch (order)
    {
    {{for R in Q.rules}}
    {{if R.domain == D.name}}
    case {{R.order}}:
      return {{{R.points_as_flat_curly_list}}, {{R.weights_as_curly_list}}};
    {{end if}}
    {{end for}}
    default:
      throw std::runtime_error("Invalid order");
    }
  {{end for}}
  default:
    throw std::runtime_error("Invalid domain");
  }
}
{{end if}}
