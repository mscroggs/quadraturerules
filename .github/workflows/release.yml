name: Make new releases

on:
  push:
#    branches: [main]

jobs:
  check-version:
    name: Check version number for changes
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.version_tag.outputs.tag }}
      release: ${{ steps.release.outputs.release }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    permissions:
      id-token: write
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Get latest tag
      id: release_tag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
    - name: Get version
      id: version_tag
      run: echo -n "tag=v$(cat VERSION)" >> $GITHUB_OUTPUT

    - name: Compare version numbers
      run: |
        if [ "${{ steps.release_tag.outputs.tag }}" = "${{ steps.version_tag.outputs.tag }}" ]; then
           echo "release=no" >> $GITHUB_OUTPUT
        else
           echo "release=yes" >> $GITHUB_OUTPUT
        fi
      id: release

  python-library:
    name: Release Python library
    runs-on: ubuntu-22.04
    if: needs.check-version.outputs.release == 'yes'
    permissions:
      id-token: write
    needs:
      - check-version
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: actions/checkout@v3

      - run: |
          python3 -m pip install -r website/requirements.txt
          python3 -m pip install -r library/requirements.txt
        name: Install requirements

      - run: |
          cd library
          python build.py python
        name: Build Python library
      - run: |
          cd library/python.build
          python3 -m pip install build
          python3 -m build .
        name: Build Python wheels

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: library/python.build/dist
        if: needs.check-version.outputs.release == 'yes'

  rust-library:
    name: Release Rust library
    runs-on: ubuntu-22.04
    if: needs.check-version.outputs.release == 'yes'
    permissions:
      id-token: write
    needs:
      - check-version
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: actions/checkout@v3

      - run: |
          python3 -m pip install -r website/requirements.txt
          python3 -m pip install -r library/requirements.txt
        name: Install requirements

      - run: |
          cd library
          python build.py rust
        name: Build Rust library
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          path: './library/rust.build'
        if: needs.check-version.outputs.release == 'yes'

  cpp-library:
    name: Build C++ source for release
    runs-on: ubuntu-22.04
    if: needs.check-version.outputs.release == 'yes'
    permissions:
      id-token: write
    needs:
      - check-version
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: actions/checkout@v3

      - run: |
          python3 -m pip install -r website/requirements.txt
          python3 -m pip install -r library/requirements.txt
        name: Install requirements

      - run: |
          cd library
          python build.py cpp
        name: Build C++ library
      - run: |
          cd library/cpp.build
          tar -cvf cpp_source.tar.gz *
        name: Make tar.gz of source
      - uses: actions/upload-artifact@v4
        with:
          name: cpp_source
          path: library/cpp.build/cpp_source.tar.gz
          retention-days: 1

  make-release:
    name: Make release on GitHub
    runs-on: ubuntu-22.04
    if: needs.check-version.outputs.release == 'yes'
    permissions:
      id-token: write
      contents: write

    needs:
      - check-version
      - python-library
#      - rust-library
      - cpp-library
    steps:
      - name: Download C++ source
        uses: actions/download-artifact@v4
        with:
          name: cpp_source

      - name: Make GitHub tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.version_tag.outputs.tag }}',
              sha: context.sha
            })
      - name: Make GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.version_tag.outputs.tag }}
          tag_name: ${{ steps.version_tag.outputs.tag }}
          files: |
            cpp_source.tar.gz
          body: |
            - [C++ source]()
            - [Python package](https://pypi.org/project/quadraturerules/${{ needs.check-version.outputs.tag }}/)
            - [Rust crate](https://crates.io/crates/quadraturerules/${{ needs.check-version.outputs.tag }})
